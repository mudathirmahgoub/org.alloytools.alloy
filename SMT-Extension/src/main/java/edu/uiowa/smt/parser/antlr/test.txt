(
; cardinality of Atom is 3
(declare-sort Atom 0)
; rep: (as @Atom_0 Atom)
; rep: (as @Atom_1 Atom)
; rep: (as @Atom_2 Atom)
(declare-sort UnaryIntTup 0)
(declare-sort BinaryIntTup 0)
(declare-sort TernaryIntTup 0)
(define-fun value_of_unaryIntTup ((BOUND_VARIABLE_940 UnaryIntTup)) (Tuple Int) (tuple 0))
(define-fun value_of_binaryIntTup ((BOUND_VARIABLE_949 BinaryIntTup)) (Tuple Int Int) (tuple 0 0))
(define-fun value_of_ternaryIntTup ((BOUND_VARIABLE_958 TernaryIntTup)) (Tuple Int Int Int) (tuple 0 0 0))
(define-fun atomNone () (Set (Tuple Atom)) (as set.empty (Set (Tuple Atom))))
(define-fun atomUniv () (Set (Tuple Atom)) (set.union (set.union (set.singleton (tuple (as @Atom_0 Atom))) (set.singleton (tuple (as @Atom_1 Atom)))) (set.singleton (tuple (as @Atom_2 Atom)))))
(define-fun atomIden () (Set (Tuple Atom Atom)) (set.union (set.union (set.singleton (tuple (as @Atom_0 Atom) (as @Atom_0 Atom))) (set.singleton (tuple (as @Atom_1 Atom) (as @Atom_1 Atom)))) (set.singleton (tuple (as @Atom_2 Atom) (as @Atom_2 Atom)))))
(define-fun this_A () (Set (Tuple Atom)) (set.union (set.union (set.singleton (tuple (as @Atom_0 Atom))) (set.singleton (tuple (as @Atom_1 Atom)))) (set.singleton (tuple (as @Atom_2 Atom)))))
(define-fun this_B () (Set (Tuple Atom)) (set.singleton (tuple (as @Atom_1 Atom))))
(define-fun this_C () (Set (Tuple Atom)) (set.singleton (tuple (as @Atom_2 Atom))))
(define-fun this_D () (Set (Tuple Atom)) (set.singleton (tuple (as @Atom_0 Atom))))
)
